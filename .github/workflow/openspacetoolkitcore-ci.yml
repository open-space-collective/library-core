################################################################################################################################################################

# @project        Open Space Toolkit â–¸ Core
# @file           .travis.yml
# @author         Remy Derollez <remy@loftorbital.com>
# @license        Apache License 2.0

################################################################################################################################################################

name: Open Space Toolkit Core GitHub Actions CI

on:
  push:
    branches:
      - /^\d+\.\d+(\.\d+)?(-\S*)?$/
      - master
      - main
      - dev
  pull_request:
    branches:
      - master
      - main

env:
  LANG: "en_US.UTF-8"

defaults:
  run: echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

jobs:
  build:
    runs-on: linux
    needs: docker
    steps:
      - name: Build Development Images
      - run: |
        make build-development-images
      - name: Deploy Development Images
      - run: |
        make deploy-development-images

  test:
    needs: linux
    needs: docker
    runs-on: linux
    steps:
      - name: Run Unit Tests Cpp
      - run: |
        make test-unit-cpp-debian
      - name: Run Unit Tests Python
      - run: |
        make test-unit-python-debian

  # deploy:
  #   if: github.event_name == 'release' && github.event.action == 'created'
  #   runs-on: linux
  #   needs: docker
  #   steps:
  #   - name: Deploy Cpp Coverage Analysis Results
  #   - run: |
  #     make deploy-coverage-cpp-results

  #   - name: Deploy Image
  #   - run: |
  #     make deploy-images

  #   - name: Deploy Documentation
  #   - run: |
  #     make deploy-documentation

  #   - name: Build Packages
  #   - run: |
  #     make build-packages

  #   - name: Deploy Packages to GitHub Release
  #   - run: |

  #           - provider: releases
  #         api_key: ${GITHUB_API_KEY}
  #         file_glob: true
  #         file:
  #           - ./packages/cpp/*
  #           - ./packages/python/*
  #         skip_cleanup: true
  #         on:
  #           branch: master
  #           tags: true


  #   - name: Deploy Python Packages to PyPI
  #   - run: |
  #     echo "Deploying Python package to PyPI..."
  #     make deploy-packages-python





  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: linux
  #   if: github.event_name == 'release' && github.event.action == 'created'
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: Set up Python
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: 3.7
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install setuptools wheel twine
  #   - name: Build and deploy to PyPI
  #     env:
  #       TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
  #       TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
  #     run: |
  #       python setup.py sdist bdist_wheel
  #       twine upload dist/*

# os:
#   - linux

# sudo: false

# services:
#   - docker

# language: cpp

# env:
#   global:
#     - LANG="en_US.UTF-8"

# stages:
#   - build
#   - test
#   - name: deploy
#     if: tag =~ ^\d+\.\d+(\.\d+)?(-\S*)?$

# before_script:
#   - echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

# jobs:
#   include:
#     - stage: build
#       name: "Image Building"
#       script:
#         - make build-development-images
#         - make deploy-development-images

#     - stage: test
#       name: "Unit Testing"
#       script:
#         - make test-unit-cpp-debian
#         - make test-unit-python-debian

#     - stage: test
#       name: "Coverage Analysis"
#       script:
#         - make deploy-coverage-cpp-results

#     - stage: deploy
#       name: "Image Deployment"
#       script:
#         - make deploy-images

#     - stage: deploy
#       name: "Documentation Deployment"
#       script:
#         - make deploy-documentation

#     - stage: deploy
#       name: "Package Deployment"
#       script:
#         - make build-packages
#       before_deploy:
#         - echo "Deploying packages to GitHub Releases..."
#       deploy:
#         - provider: releases
#           api_key: ${GITHUB_API_KEY}
#           file_glob: true
#           file:
#             - ./packages/cpp/*
#             - ./packages/python/*
#           skip_cleanup: true
#           on:
#             branch: master
#             tags: true
#       after_deploy:
#         - echo "Deploying Python package to PyPI..."
#         - make deploy-packages-python

################################################################################################################################################################
